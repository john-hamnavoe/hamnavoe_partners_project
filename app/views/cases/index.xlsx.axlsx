wb = xlsx_package.workbook

wb.add_worksheet(name: "Summary") do |sheet|
  sheet.add_row ['Cases Summary By Status',	'', '#', '']
  @summary_cases.each do |key, value|
    sheet.add_row ['',	key,	value, '']
  end

  total_cases = @tprocesses.count

  sheet.add_row ['',	'', '', '']  

  sheet.add_row ['Test Case Summary',	'', '#', '%']    
  sheet.add_row ['',	'Total Test Cases',	total_cases, '']
  uat_blocked = 0
  demo_blocked = 0
  volume_test_cases = 0
  test_cases_exe = 0
  volume_test_exe = 0  
  @tprocesses.each do |line|
    demo_blocked = demo_blocked + 1 if  line.cases.where.not(status: "Closed").pluck(:tags).join("").include?("DEMO")
    uat_blocked = uat_blocked + 1 if  line.cases.where.not(status: "Closed").pluck(:tags).join("").include?("UAT") 
    test_cases_exe = test_cases_exe + 1 unless line.tests_executed
    if line.volume_test_required
      volume_test_cases = volume_test_cases + 1 
      volume_test_exe = volume_test_exe + 1 unless line.volume_tests_executed
    end
  end  

  sheet.add_row ['',	'Test Cases Blocked for Demo by Issues',	demo_blocked, (demo_blocked.to_f / total_cases.to_f * 100).round]
  sheet.add_row ['',	'Test Cases Blocked for UAT by Issues',	uat_blocked, (uat_blocked.to_f / total_cases.to_f * 100).round]
  sheet.add_row ['',	'Test Cases Not Executable',	test_cases_exe, (test_cases_exe.to_f / total_cases.to_f * 100).round]  
  sheet.add_row ['',	'Total Volume Related Test Cases',	volume_test_cases, '']
  sheet.add_row ['',	'Volume Test Cases Not Executable',	volume_test_exe, (volume_test_exe.to_f / volume_test_cases.to_f * 100).round] if volume_test_cases.positive?
end

wb.add_worksheet(name: "Cases") do |sheet|
  sheet.add_row ['Case No',	'Subject', 'Priority', 'Status', 'Previous Status', 
                 'Next Steps', 'Demo', 'UAT', 'PROD', 'Manual', 'Accept', 'Customer Face',	'Process',	'Notes',	'Tags',
                 'Assigned To', 'Stage', 'Product', 'Module']
  @tcases.each do |line|
    demo = line.tags.include?("DEMO") ? "Y" : "" unless line.tags.nil?
    uat = line.tags.include?("UAT") ? "Y" : "" unless line.tags.nil?
    prod = line.tags.include?("PROD") ? "Y" : "" unless line.tags.nil?
    man = line.tags.include?("MANUAL") ? "Y" : "" unless line.tags.nil?
    acc = line.tags.include?("ACCEPT") ? "Y" : "" unless line.tags.nil?
    cus = line.tags.include?("CUSTOMER") ? "Y" : "" unless line.tags.nil?    
    sheet.add_row [line.case_no,	line.subject,	line.priority, line.status, line.previous_status, 
                   line.next_steps, demo, uat, prod, man, acc, cus, line.test_case&.title, line.notes, line.tags,    
                  line.assigned_to, line.stage, line.product, line.module]
  end
end

wb.add_worksheet(name: "Processes") do |sheet|
  sheet.add_row ['Position', 'Status',	'Department', 'Title', 'Assigned', 'UAT Demo Status', 
                 'Blocking P1 Cases', 'Blocking P2 Cases', 'All Linked Cases', 'Extra', 'Notes', 'Additional Solutions', 
                 'Vol. Test Req.?', 'Volume Per Month', 'Tests Execute?', 'Vol. Tests Execute?']
  @tprocesses.each do |line|
    demo = line.cases.where.not(status: "Closed").pluck(:tags).join("").include?("DEMO")
    uat = line.cases.where.not(status: "Closed").pluck(:tags).join("").include?("UAT")
    uat_status = if uat && demo 
                  "Blocked UAT and Demo"
                 elsif uat 
                  "Blocked UAT"
                 elsif demo 
                  "Blocked Demo"
                 else 
                  ""
                end

    status = if line.blocking_p1_cases.count.positive? || line.blocking_p2_cases.count.positive?
                "Blocked By Cases"
             elsif !line.tests_executed
                "Tests Not Executable"
             elsif line.volume_test_required && !line.volume_tests_executed 
                "Volume Tests Not Executable"
             else 
                "Passing"
             end           

    vol_test_req = line.volume_test_required ? "Y" : ""
    vol_test_exe = line.volume_tests_executed ? "Y" : ""
    test_exe = line.tests_executed ? "Y" : ""

    cases = line.active_cases.pluck(:case_no).join(",")
    blocking_p1_cases = line.blocking_p1_cases.pluck(:case_no).join(",")
    blocking_p2_cases = line.blocking_p2_cases.pluck(:case_no).join(",")    
    sheet.add_row [line.position,	status, line.department,	line.title, line.assigned_to, uat_status, 
                   blocking_p1_cases, blocking_p2_cases, cases, line.extra, line.notes, line.additional_solution, 
                   vol_test_req, line.volume_per_month, test_exe, vol_test_exe], 
                   types: [nil, nil, nil, nil, nil, nil, :string, :string, :string, nil, nil, nil, nil, nil, nil, nil]
  end
end